// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: tracker/v1/tracker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tracker_CreateBlockFunc_FullMethodName = "/helloworld.v1.tracker.Tracker/CreateBlockFunc"
	Tracker_DeletBlockFunc_FullMethodName  = "/helloworld.v1.tracker.Tracker/DeletBlockFunc"
	Tracker_UpdateBlockFunc_FullMethodName = "/helloworld.v1.tracker.Tracker/UpdateBlockFunc"
	Tracker_ListBlockFunc_FullMethodName   = "/helloworld.v1.tracker.Tracker/ListBlockFunc"
)

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerClient interface {
	CreateBlockFunc(ctx context.Context, in *CreateBlock, opts ...grpc.CallOption) (*BlockResp, error)
	DeletBlockFunc(ctx context.Context, in *DeletBlock, opts ...grpc.CallOption) (*BlockResp, error)
	UpdateBlockFunc(ctx context.Context, in *UpdateBlock, opts ...grpc.CallOption) (*BlockResp, error)
	ListBlockFunc(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*BlockResp, error)
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) CreateBlockFunc(ctx context.Context, in *CreateBlock, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, Tracker_CreateBlockFunc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) DeletBlockFunc(ctx context.Context, in *DeletBlock, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, Tracker_DeletBlockFunc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) UpdateBlockFunc(ctx context.Context, in *UpdateBlock, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, Tracker_UpdateBlockFunc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) ListBlockFunc(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, Tracker_ListBlockFunc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServer is the server API for Tracker service.
// All implementations must embed UnimplementedTrackerServer
// for forward compatibility
type TrackerServer interface {
	CreateBlockFunc(context.Context, *CreateBlock) (*BlockResp, error)
	DeletBlockFunc(context.Context, *DeletBlock) (*BlockResp, error)
	UpdateBlockFunc(context.Context, *UpdateBlock) (*BlockResp, error)
	ListBlockFunc(context.Context, *GetListReq) (*BlockResp, error)
	mustEmbedUnimplementedTrackerServer()
}

// UnimplementedTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (UnimplementedTrackerServer) CreateBlockFunc(context.Context, *CreateBlock) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockFunc not implemented")
}
func (UnimplementedTrackerServer) DeletBlockFunc(context.Context, *DeletBlock) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletBlockFunc not implemented")
}
func (UnimplementedTrackerServer) UpdateBlockFunc(context.Context, *UpdateBlock) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockFunc not implemented")
}
func (UnimplementedTrackerServer) ListBlockFunc(context.Context, *GetListReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockFunc not implemented")
}
func (UnimplementedTrackerServer) mustEmbedUnimplementedTrackerServer() {}

// UnsafeTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServer will
// result in compilation errors.
type UnsafeTrackerServer interface {
	mustEmbedUnimplementedTrackerServer()
}

func RegisterTrackerServer(s grpc.ServiceRegistrar, srv TrackerServer) {
	s.RegisterService(&Tracker_ServiceDesc, srv)
}

func _Tracker_CreateBlockFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).CreateBlockFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracker_CreateBlockFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).CreateBlockFunc(ctx, req.(*CreateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_DeletBlockFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).DeletBlockFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracker_DeletBlockFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).DeletBlockFunc(ctx, req.(*DeletBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_UpdateBlockFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).UpdateBlockFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracker_UpdateBlockFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).UpdateBlockFunc(ctx, req.(*UpdateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_ListBlockFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).ListBlockFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tracker_ListBlockFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).ListBlockFunc(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracker_ServiceDesc is the grpc.ServiceDesc for Tracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.tracker.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlockFunc",
			Handler:    _Tracker_CreateBlockFunc_Handler,
		},
		{
			MethodName: "DeletBlockFunc",
			Handler:    _Tracker_DeletBlockFunc_Handler,
		},
		{
			MethodName: "UpdateBlockFunc",
			Handler:    _Tracker_UpdateBlockFunc_Handler,
		},
		{
			MethodName: "ListBlockFunc",
			Handler:    _Tracker_ListBlockFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracker/v1/tracker.proto",
}
